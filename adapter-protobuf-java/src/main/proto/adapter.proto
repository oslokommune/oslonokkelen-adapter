syntax = "proto3";

package com.github.oslokommune.oslonokkelen.adapter.proto;

// The role of the manifest is to describe what the adapter can
// do and the state things are in right now.
message AdapterManifest {

  // Can be used to optimize scraping. Backend can pass last known version
  // when scraping and if nothing has changed the adapter is allowed to return
  // an empty 304 not modified response to avoid re-transferring the same data
  // Oslonøkkelen already knows.
  int64 version = 1;

  repeated Thing things = 2;

  // Declaration of errors might returned from the adapter.
  repeated ErrorCodeDescription error_code_descriptions = 3;


  // Examples:
  //  * front-door
  //  * outdoor-lighting
  message Thing {

    // Url safe id
    string id = 1;

    // Short one line description of what it does
    string description = 2;

    // Optional.
    // Determines who can administer this thing in Oslonøkkelen key studio.
    string admin_role = 3;

    // Supported states.
    // That a state is supported does not require it to be present at all times.
    repeated ThingStateType supported_state_types = 4;

    // What the thing can do
    repeated Action actions = 5;

    repeated ThingState state = 6;

  }

  // Examples:
  //  * unlock
  //  * open
  message Action {

    // Url safe id
    string id = 1;

    // Short one line description of what it does
    string description = 2;

    // Required input
    repeated AttachmentType required_input_attachment_types = 3;

    // Possible output
    repeated AttachmentType possible_output_attachment_types = 4;

    reserved 5;

  }


  message ErrorCodeDescription {

    // Url safe code.
    // Example: im-a-teapot
    string code = 1;

    // Really short human readable description explaining
    // when this code will be returned.
    string description = 2;

  }

}



message ActionRequest {

  // Useful for correlation of requests across systems
  string request_id = 5;

  string thing_id = 1;
  string action_id = 2;

  // Any attachments produced by the action
  repeated Attachment attachments = 3;

  // The app will have enforce a timeout. The adapter should try
  // hard to return within this time budget. Returning a timeout
  // error is better then not returning anything.
  int32 time_budget_millis = 4;

}


message ActionResponse {

  Status status = 1;

  // Any attachments produced by the action
  repeated Attachment attachments = 2;



  enum Status {

    // All good!
    SUCCESS = 0;

    // Something really crashed bad..
    // No need to automatically try again.
    ERROR_PERMANENT = 1;

    // Something like temporary network exceptions.
    // Automatic retry might work!
    ERROR_TEMPORARY = 2;

    // Access denied.
    // No need retrying with the same input.
    DENIED = 3;

  }

}

// Different actions can require certain input
enum AttachmentType {

  // Useful for authorization.
  // Try to avoid depending on this if possible as it comes
  // with a lot of GDPR related requirements.
  NORWEGIAN_FODSELSNUMMER = 0;

  CODE = 1;

  reserved 2;

  END_USER_MESSAGE = 3;

  ERROR_DESCRIPTION = 4;

  DENIED_REASON = 5;

}

// Action requests and responses can contain attachments.
message Attachment {

  oneof value {
    Code code = 1;
    ErrorDescription error_description = 3;
    EndUserMessage end_user_message = 4;
    NorwegianFodselsnummer norwegian_fodselsnummer = 5;
    DeniedReason denied_reason = 6;
  }

  message Code {

    // Url safe string identifying the code.
    //
    // Examples:
    //  * gjenbruksid
    //  * lånekortnummer
    string id = 1;

    // The actual code
    string code = 2;

    // ISO-8601
    string expires_at = 3;

    // Is the app required to verify a cached code? Or can it assume
    // that it never expires before the expire date?
    bool must_verify = 4;

    // Optional text to be displayed above the code
    string header_text = 5;

    // Optional text to be displayed under the code
    string footer_text = 6;

  }

  message ErrorDescription {

    // Something like: unknown-user or db-connection-error
    // Should be declared in the action manifest to allow
    // admins to map error codes to human readable messages.
    string code = 1;

    string debugMessage = 2;

    bool permanent = 3;


  }

  message DeniedReason {

    // Something like: unknown-user
    // Should be declared in the action manifest to allow
    // admins to map error codes to human readable messages.
    string code = 1;

    string debugMessage = 2;

  }

  // Provides an option to send a message back to the
  // person who executed the action. Keep it short.
  message EndUserMessage {

    // Human readable message for end user.
    TextContent message = 1;

    // Optional link (to website)
    string link = 2;

    // Optional link name. Will be ignored without a link.
    // Single line and max 20 characters.
    string linkName = 3;

  }

  message NorwegianFodselsnummer {
    string number = 1;
  }

}

message TextContent {

  string message = 1;
  ContentType contentType = 2;

  enum ContentType {
    PLAIN_TEXT = 0;
    MARKDOWN = 1;
  }

}

enum ThingStateType {

  // The door, window.. is in open or closed position
  OPEN = 0;

  // The door, window.. is in lock or unlocked state
  LOCKED = 1;

  QUEUE_LENGTH_ESTIMATE = 2;

  // Can be repeated multiple times
  // for things with more then one action.
  ACTION_HEALTH = 3;

  // Are we connected to some external system?
  REMOTE_CONNECTION = 4;

  // Temperature..
  // Light
  //

}

message ThingState {

  // ISO-8601
  string last_update = 1;

  oneof value {
    Open open = 2;
    Locked locked = 3;
    QueueEstimate queue_estimate = 4;
    ActionHealth action_health = 5;
    RemoteConnection remote_connection = 6;
    DebugLog debug_log = 7;
  }


  enum Open {
    OPEN = 0;
    CLOSED = 1;
  }

  enum Locked {
    LOCKED = 0;
    UNLOCKED = 1;
  }

  message QueueEstimate {
    int32 minutes = 1;
  }

  //
  message ActionHealth {

    // Must match the id of one of the actions of the thing
    string action_id = 1;

    // True if everything seems to be working
    bool healthy = 2;

    // Debug message to help administrators debug the problem.
    // Will never be presented to end users.
    string debug_message = 3;

  }

  // Most adapters will work as a bridge between Oslonøkkelen
  // and one or more remote systems. This message can be used to
  // communicate the status of a connection between the adapter
  // and one of those remote systems.
  message RemoteConnection {

    // Short id of the remote system
    string systemId = 4;

    // True if the connection is healthy
    bool connected = 1;

    // When we was connected / disconnected
    // depending on the 'connected' property.
    int64 timestamp_epoch_seconds = 2;

    // Short one liner describing the connection status.
    string debug_message = 3;
  }

  message DebugLog {

    repeated Line lines = 1;

    message Line {
      int64 timestamp_epoch_millis = 1;
      Level level = 2;
      string message = 3;
    }

    enum Level {
      DEBUG = 0;
      INFO = 1;
      WARNING = 2;
      ERROR = 3;
    }

  }

}